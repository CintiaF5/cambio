{"version":3,"sources":["App.js","index.js"],"names":["App","useState","valor","setValor","resultado","setResultado","tipoMoeda1","setTipo1Moeda","tipoMoeda2","setTipo2Moeda","tiposMoedas","value","label","data","Date","a","url","fetch","then","response","json","console","log","high","Navbar","bg","Brand","href","Jumbotron","Form","Label","FormControl","type","placeholder","onChange","event","target","TextField","id","select","helperText","map","option","MenuItem","Button","variant","color","startIcon","onClick","aux","inverter","endIcon","converter","Row","className","Card","Header","toLocaleString","style","currency","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+UA6LeA,MA3Kf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEqBF,mBAAS,IAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGuBJ,mBAAS,OAHhC,mBAGNK,EAHM,KAGMC,EAHN,OAIuBN,mBAAS,OAJhC,mBAINO,EAJM,KAIMC,EAJN,KAKPC,EAAc,CAAC,CACnBC,MAAO,MACPC,MAAO,cAET,CACED,MAAO,MACPC,MAAO,eAET,CACED,MAAO,MACPC,MAAO,YAGHC,EAAO,IAAIC,KAlBJ,4CAwBb,4BAAAC,EAAA,sDACMC,EADN,6CACkDV,EADlD,YACgEE,EADhE,MAEKF,IAAeE,EAClBS,MAAMD,GACHE,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACL,GACLA,EAAOA,EAAK,GACZQ,QAAQC,IAAIT,GACZR,EAAaH,EAAQW,EAAKU,SAG5BlB,EAAaH,GAXjB,4CAxBa,sBA6Cb,OACE,qCAEE,eAACsB,EAAA,EAAD,CAAQC,GAAG,OAAX,UACG,IAED,cAACD,EAAA,EAAOE,MAAR,CAAcC,KAAK,UAAnB,oCAEF,eAACC,EAAA,EAAD,WACE,kFAC+C,cAAC,IAAD,OAE/C,wFACA,uBACA,eAACC,EAAA,EAAD,WACE,cAACA,EAAA,EAAKC,MAAN,+CACA,cAACC,EAAA,EAAD,CACEC,KAAK,OACLrB,MAAOT,EACP+B,YAAY,KACZC,SAAU,SAACC,GAAD,OAAWhC,EAASgC,EAAMC,OAAOzB,UAE7C,uBACA,cAACkB,EAAA,EAAKC,MAAN,oCACA,uBACA,cAACO,EAAA,EAAD,CACAC,GAAG,4BACHC,QAAM,EACN3B,MAAM,SACND,MAAOL,EACP4B,SAAU,SAACC,GAAD,OAAW5B,EAAc4B,EAAMC,OAAOzB,QAChD6B,WAAW,8BANX,SAQC9B,EAAY+B,KAAI,SAACC,GAAD,OACf,aAD6B,CAC5BC,EAAA,EAAD,CAA6BhC,MAAO+B,EAAO/B,MAA3C,SACG+B,EAAO9B,OADK8B,EAAO/B,YAkBxB,uBACA,uBACA,cAACiC,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNC,UAAW,cAAC,IAAD,IACXC,QAAS,kBAhEnB,WACE,IAAMC,EAAM3C,EACZC,EAAcC,GACdC,EAAcwC,GA6DSC,IAJjB,sBAQA,uBACA,uBACA,cAACrB,EAAA,EAAKC,MAAN,oCACA,uBAcF,cAACO,EAAA,EAAD,CACEC,GAAG,4BACHC,QAAM,EACN3B,MAAM,SACND,MAAOH,EACP0B,SAAU,SAACC,GAAD,OAAW1B,EAAc0B,EAAMC,OAAOzB,QAChD6B,WAAW,8BANb,SAQG9B,EAAY+B,KAAI,SAACC,GAAD,OACf,cAACC,EAAA,EAAD,CAA6BhC,MAAO+B,EAAO/B,MAA3C,SACG+B,EAAO9B,OADK8B,EAAO/B,YAKxB,uBACA,uBACA,cAACiC,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNK,QAAS,cAAC,IAAD,IACTH,QAAS,kBAhJN,0CAgJYI,IAJjB,uBAQA,uBACA,uBACA,sEAA8BvC,KAC9B,0BAEF,uBACA,cAACwC,EAAA,EAAD,CAAKC,UAAU,yBAAf,SACE,cAACC,EAAA,EAAD,CAAM9B,GAAG,OAAO6B,UAAU,cAA1B,SACE,eAACC,EAAA,EAAKC,OAAN,WACE,6BACGpD,EAAUqD,eAAe,QAAS,CACjCC,MAAO,WACPC,SAAU,UAGd,qCCjLdC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2ac206c4.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport { FaCoins } from \"react-icons/fa\";\nimport Card from \"react-bootstrap/Card\";\nimport Row from \"react-bootstrap/Row\";\nimport \"./App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport Icon from \"@material-ui/core/Icon\";\nimport AttachMoneyIcon from \"@material-ui/icons/AttachMoney\";\nimport SwapVertIcon from '@material-ui/icons/SwapVert';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\n\nfunction App() {\n  const [valor, setValor] = useState(\"\"); /* const é uma variável de valor fixo, somente para leitura, então vamos utilizar para ler a moeda que o user colocar */\n  const [resultado, setResultado] = useState(\"\");\n  const [tipoMoeda1, setTipo1Moeda] = useState(\"BRL\"); /* inicia a lista de moeda com real */\n  const [tipoMoeda2, setTipo2Moeda] = useState(\"USD\"); /* inicia a lista de moeda2 com dólar */\n  const tiposMoedas = [{\n    value: 'USD',\n    label: '$ Dólar',\n  },\n  {\n    value: 'EUR',\n    label: '€ Euro',\n  },\n  {\n    value: 'BRL',\n    label: 'R$ Real',\n  }]\n  \n  const data = new Date(); /* new date para atualizar o site em tempo real */\n\n  // useEffect(() => { /* useEffect esta sendo utilizado para não precisar do botão de conversão, pois assim que o user digita o valor ele já trás o resultado */\n  //   converter()\n  // })\n\n  async function converter() {\n    let url = `https://economia.awesomeapi.com.br/${tipoMoeda1}-${tipoMoeda2}/1`;\n    if(tipoMoeda1 !== tipoMoeda2){\n    fetch(url) /* fetch busca os dados na URL */\n      .then((response) => response.json())\n      .then((data) => {\n        data = data[0]; /* guardar o resultado de retorno da API */\n        console.log(data);\n        setResultado(valor * data.high);\n      });\n    } else{\n      setResultado(valor)\n    }\n  }\n\n  function inverter(){\n    const aux = tipoMoeda1;\n    setTipo1Moeda(tipoMoeda2)\n    setTipo2Moeda(aux)\n  }\n\n  return (\n    <>\n      {/* React Fragment */}\n      <Navbar bg=\"info\">\n        {\" \"}\n        {/* Navbar = barra de navegação */}\n        <Navbar.Brand href=\"#inicio\">Conversor de Moedas</Navbar.Brand>\n      </Navbar>\n      <Jumbotron>\n        <h1>\n          Olá! Bem-vindes ao nosso Conversor de Moedas <FaCoins />\n        </h1>\n        <p>Aqui você poderá converter real, dólar e euro!</p>\n        <br></br>\n        <Form>\n          <Form.Label>Informe o valor a ser convertido</Form.Label>\n          <FormControl\n            type=\"text\"\n            value={valor}\n            placeholder=\"R$\"\n            onChange={(event) => setValor(event.target.value)}\n          />\n          <br></br>\n          <Form.Label>Informe a moeda atual</Form.Label>\n          <br></br>\n          <TextField\n          id=\"standard-select-currency1\"\n          select\n          label=\"Select\"\n          value={tipoMoeda1}\n          onChange={(event) => setTipo1Moeda(event.target.value)}\n          helperText=\"Please select your currency\"\n        >\n          {tiposMoedas.map((option) => ( /* .map, percorre o array de tipo de moedas e cria o menu de itens */\n            <MenuItem key={option.value} value={option.value}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </TextField>\n\n          {/* <Select\n          labelId=\"demo-simple-select-placeholder-label-label\"\n          id=\"demo-simple-select-placeholder-label\"\n          value={moeda1}\n          onChange={(event) => setMoeda1(event.target.value)}\n          displayEmpty\n          // className={classes.selectEmpty}\n        >\n          <MenuItem value={\"BRL\"}>Real</MenuItem>\n          <MenuItem value={\"USD\"}>Dólar</MenuItem>\n          <MenuItem value={\"EUR\"}>Euro</MenuItem>\n        </Select> */}\n          <br></br>\n          <br></br>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<SwapVertIcon />}\n            onClick={() => inverter()}        \n          >\n            INVERTER\n          </Button>\n          <br></br>\n          <br></br>\n          <Form.Label>Informe a moeda atual</Form.Label>\n          <br></br>\n          {/* <Select\n          labelId=\"demo-simple-select-placeholder-label-label\"\n          id=\"demo-simple-select-placeholder-label\"\n          value={moeda2}\n          onChange={(event) => setMoeda2(event.target.value)}\n          displayEmpty\n          // className={classes.selectEmpty}\n        >\n  \n          <MenuItem value={\"BRL\"}>Real</MenuItem>\n          <MenuItem value={\"USD\"}>Dólar</MenuItem>\n          <MenuItem value={\"EUR\"}>Euro</MenuItem>\n        </Select> */}\n        <TextField\n          id=\"standard-select-currency1\"\n          select\n          label=\"Select\"\n          value={tipoMoeda2}\n          onChange={(event) => setTipo2Moeda(event.target.value)}\n          helperText=\"Please select your currency\"\n        >\n          {tiposMoedas.map((option) => (\n            <MenuItem key={option.value} value={option.value}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </TextField>\n          <br></br>\n          <br></br>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            endIcon={<AttachMoneyIcon />}\n            onClick={() => converter()}\n          >\n            CONVERTER\n          </Button>\n          <br></br>\n          <br></br>\n          <span>{`Última atualização: ${data}`}</span>\n          <br></br>\n        </Form>\n        <br></br>\n        <Row className=\"justify-content-center\">\n          <Card bg=\"info\" className=\"text-center\">\n            <Card.Header>\n              <h2>\n                {resultado.toLocaleString(\"pt-br\", {\n                  style: \"currency\",\n                  currency: \"BRL\",\n                })}\n              </h2>\n              <h3></h3>\n            </Card.Header>\n          </Card>\n        </Row>\n      </Jumbotron>\n    </>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}