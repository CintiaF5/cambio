{"version":3,"sources":["App.js","index.js"],"names":["App","useState","valor","setValor","resultado","setResultado","tipoMoeda1","setTipo1Moeda","tipoMoeda2","setTipo2Moeda","Date","data","setData","tiposMoedas","value","label","a","url","valorCalc","replace","isNaN","alert","fetch","then","response","json","high","create_date","useEffect","converter","document","title","Navbar","bg","Brand","Jumbotron","Form","Label","FormControl","type","placeholder","onChange","event","target","TextField","id","select","helperText","map","option","MenuItem","Button","variant","color","startIcon","onClick","aux","inverter","Card","className","Header","toLocaleString","style","currency","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b6322cca.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport { FaCoins } from \"react-icons/fa\";\nimport Card from \"react-bootstrap/Card\";\nimport \"./App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport SwapVertIcon from \"@material-ui/icons/SwapVert\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport ContactMailIcon from \"@material-ui/icons/ContactMail\";\n\nfunction App() {\n  /* const é uma variável de valor fixo, somente para leitura, então vamos utilizar para ler a moeda que o user colocar */\n  const [valor, setValor] = useState(\"\");\n\n  const [resultado, setResultado] = useState(\"\");\n\n  /* inicia a lista de moeda com real */\n  const [tipoMoeda1, setTipo1Moeda] = useState(\"BRL\");\n\n  /* inicia a lista de moeda2 com dólar */\n  const [tipoMoeda2, setTipo2Moeda] = useState(\"USD\");\n\n  /* new date para atualizar o site em tempo real */\n  const [data, setData] = useState(new Date());\n\n  const tiposMoedas = [\n    /* tipos de moedas disponíveis para conversão */\n    {\n      value: \"USD\",\n      label: \"$ Dólar\",\n    },\n    {\n      value: \"EUR\",\n      label: \"€ Euro\",\n    },\n    {\n      value: \"BRL\",\n      label: \"R$ Real\",\n    },\n  ];\n\n  /* useEffect realiza a conversão a partir de qualquer alteração de estado de um componente */\n  useEffect(() => {\n    converter();\n    document.title = `Conversor de moedas`;\n  });\n\n  async function converter() {\n    /* realiza requisição para a API */\n    const url = `https://economia.awesomeapi.com.br/${tipoMoeda1}-${tipoMoeda2}/1`;\n\n    const valorCalc = valor.replace(\",\", \".\" ); /* utilizado para converter vígula para ponto */\n\n    if (valorCalc === \"\"){\n      setResultado(0);\n      return;\n    }\n\n    if (isNaN(valorCalc) || valorCalc < 0) {\n      /* validação para não funcionar com números negativos ou texto, somente funciona com não negativos */\n      alert(\"Ops! Valores inválidos, por favor digite novamente\");\n      setValor(\"\");\n      return;\n    }\n\n    if (tipoMoeda1 !== tipoMoeda2) {\n      /* verifica se a conversão esta sendo feita para a mesma moeda, retornando assim o próprio valor caso ocorra */\n      fetch(url) /* fetch busca os dados na URL */\n        .then((response) => response.json())\n        .then((data) => {\n          data = data[0]; /* guardar o resultado de retorno da API */\n          setResultado(valorCalc * data.high);\n          setData(data.create_date);\n        });\n    } else {\n      setResultado(valorCalc);\n    }\n  }\n\n  function inverter() {\n    /* utilizado para trocar os campos de moedas */\n    const aux = tipoMoeda1;\n    setTipo1Moeda(tipoMoeda2);\n    setTipo2Moeda(aux);\n  }\n\n  return (\n    /* tudo o que será mostrado */\n    <>\n      {/* React Fragment */}\n      <Navbar bg=\"info\">\n        {\" \"}\n        {/* Navbar = barra de navegação */}\n        <Navbar.Brand>Conversor de Moedas</Navbar.Brand>\n      </Navbar>\n      <Jumbotron>\n        <h1>\n          Olá! Bem-vindo(a) ao conversor de moedas <FaCoins />\n        </h1>\n        <p>\n          Aqui você poderá fazer a conversão de moedas para Real, Dólar e Euro!\n        </p>\n        <br></br>\n        <Form>\n          <Form.Label>Informe o valor a ser convertido</Form.Label>\n          <FormControl /* local que o user vai digitar */\n            type=\"text\"\n            value={valor}\n            placeholder=\"$\"\n            onChange={(event) =>\n              setValor(event.target.value)\n            } /* onChange para quando a digitação, guarda o valor digitado */\n          />\n          <br></br>\n          <Form.Label>Informe a moeda atual</Form.Label>\n          <br></br>\n          <TextField /* lista de moedas */\n            id=\"standard-select-currency1\"\n            select\n            label=\"\"\n            value={tipoMoeda1}\n            onChange={(event) => setTipo1Moeda(event.target.value)}\n            helperText=\"Por favor selecione a moeda atual\"\n          >\n            {tiposMoedas.map((\n              option /* .map, percorre o array de tipo de moedas e cria o menu de itens */\n            ) => (\n              <MenuItem key={option.value} value={option.value}>\n                {option.label}\n              </MenuItem>\n            ))}\n          </TextField>\n          <br></br>\n          <br></br>\n          <Button /* botão para inverter o tipo de moeda selecionado */\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<SwapVertIcon />}\n            onClick={() => inverter()}\n          >\n            INVERTER\n          </Button>\n          <br></br>\n          <br></br>\n          <Form.Label>Informe a moeda a ser convertida</Form.Label>\n          <br></br>\n          <TextField\n            id=\"standard-select-currency1\"\n            select\n            label=\"\"\n            value={tipoMoeda2}\n            onChange={(event) => setTipo2Moeda(event.target.value)}\n            helperText=\"Por favor selecione a moeda a ser convertida\"\n          >\n            {tiposMoedas.map((option) => (\n              <MenuItem key={option.value} value={option.value}>\n                {option.label}\n              </MenuItem>\n            ))}\n          </TextField>\n          <br></br>\n          <Card bg=\"info\" className=\"text-center\">\n            {\" \"}\n            {/* card esta sendo utilizado para mostrar o resultado */}\n            <Card.Header>\n              <h2>\n                {resultado.toLocaleString(\"pt-br\", {\n                  style: \"currency\",\n                  currency: tipoMoeda2,\n                })}\n              </h2>\n            </Card.Header>\n          </Card>\n          <br></br>\n          <span>{`Última atualização: ${data}`}</span>\n        </Form>\n      </Jumbotron>\n      <footer>\n        {\" \"}\n        {/* rodapé */}\n        Aplicativo desenvolvido por Cintia Felix Mendonça <br></br>{\" \"}\n        {<ContactMailIcon />} cintiafelix1@gmail.com\n      </footer>\n    </>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}